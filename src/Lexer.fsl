{

open System
open FSharp.Text.Lexing


let lexme = LexBuffer<_>.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

  
exception SyntaxError of string

}


let whitespace = [' ' '\t']
let newline = ('\n' | '\r' '\n')

let atomStart = '`'
let atomString = ['A'-'z' '-' 'A'-'Ï‰' ]+

let natural = ['0' - '9']+





rule tokenStream = parse
  | '(' { Parser.L_PAREN }
  | ')' { Parser.R_PAREN }
  | '+' { Parser.PLUS }
  | "add1" { Parser.ADD1 }
  | atomStart atomString { Parser.ATOM ((lexme lexbuf).[1..]) }
  | newline { newline lexbuf; tokenStream lexbuf } 
  | eof { Parser.EOF }
  | "car" whitespace* { Parser.CAR }
  | "cons" whitespace* { Parser.CONS }
  | "cdr" whitespace* { Parser.CDR }
  | whitespace { tokenStream lexbuf }
  | "zero" { Parser.NAT (0) }
  | natural { Parser.NAT (lexme lexbuf |> int) }
  | _ {raise (SyntaxError ("Invalid string provided"))}
