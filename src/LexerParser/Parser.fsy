%{
  open AST
%}

%start start
%token <string> NAME
%token <string> ATOM
%token <uint32> NAT
%token EOF L_PAREN R_PAREN CONS CAR CDR PLUS ADD1 CLAIM ZERO DEFINE
%token T_NAT T_ATOM T_PAIR LAMBDA
%type <AST.Prog> start 
%%

start: prog { $1 }



typ:
 | T_NAT { Type.Nat }
 | T_ATOM { Type.Atom }
 | T_PAIR typ typ { Type.Pair($2,$3) }
 
 
value:
  | ATOM { Atom($1) }
  | ZERO { Nat(0u) }
  | NAT { Nat($1) }


both:
  | stmnt { $1 }
  | value { $1 }

name_fields:
  | { [] }
  | NAME { [$1] }
  | name_fields NAME { $2 :: $1 }


statement_list:
  | both { [$1] }
  | statement_list both { $2 :: $1 }
      

stmntbody:
  | value {$1}
  | LAMBDA L_PAREN name_fields R_PAREN statement_list { Lambda(List.rev $3, List.rev $5) }
  | CONS both both { Cons($2, $3) }
  | CAR both  { Car($2) }
  | CDR both  { Cdr($2) }
  | PLUS both both  { Plus( $2, $3) }
  | ADD1 both  { Add1($2) }
  | CLAIM NAME typ { Claim ($2,$3) }
  | DEFINE NAME both { Define ( $2, $3) }
  

stmnt:
  | L_PAREN stmntbody R_PAREN { $2 }



prog:
  | stmnt prog { List.rev ($1::$2) }
  | EOF { [] }

  

