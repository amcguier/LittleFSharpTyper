// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

  open AST

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | T_NAT
  | T_ATOM
  | T_PAIR
  | LAMBDA
  | EOF
  | L_PAREN
  | R_PAREN
  | CONS
  | CAR
  | CDR
  | PLUS
  | ADD1
  | CLAIM
  | ZERO
  | DEFINE
  | NAT of (uint32)
  | ATOM of (string)
  | NAME of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_T_NAT
    | TOKEN_T_ATOM
    | TOKEN_T_PAIR
    | TOKEN_LAMBDA
    | TOKEN_EOF
    | TOKEN_L_PAREN
    | TOKEN_R_PAREN
    | TOKEN_CONS
    | TOKEN_CAR
    | TOKEN_CDR
    | TOKEN_PLUS
    | TOKEN_ADD1
    | TOKEN_CLAIM
    | TOKEN_ZERO
    | TOKEN_DEFINE
    | TOKEN_NAT
    | TOKEN_ATOM
    | TOKEN_NAME
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_typ
    | NONTERM_value
    | NONTERM_both
    | NONTERM_name_fields
    | NONTERM_statement_list
    | NONTERM_stmntbody
    | NONTERM_stmnt
    | NONTERM_prog

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | T_NAT  -> 0 
  | T_ATOM  -> 1 
  | T_PAIR  -> 2 
  | LAMBDA  -> 3 
  | EOF  -> 4 
  | L_PAREN  -> 5 
  | R_PAREN  -> 6 
  | CONS  -> 7 
  | CAR  -> 8 
  | CDR  -> 9 
  | PLUS  -> 10 
  | ADD1  -> 11 
  | CLAIM  -> 12 
  | ZERO  -> 13 
  | DEFINE  -> 14 
  | NAT _ -> 15 
  | ATOM _ -> 16 
  | NAME _ -> 17 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_T_NAT 
  | 1 -> TOKEN_T_ATOM 
  | 2 -> TOKEN_T_PAIR 
  | 3 -> TOKEN_LAMBDA 
  | 4 -> TOKEN_EOF 
  | 5 -> TOKEN_L_PAREN 
  | 6 -> TOKEN_R_PAREN 
  | 7 -> TOKEN_CONS 
  | 8 -> TOKEN_CAR 
  | 9 -> TOKEN_CDR 
  | 10 -> TOKEN_PLUS 
  | 11 -> TOKEN_ADD1 
  | 12 -> TOKEN_CLAIM 
  | 13 -> TOKEN_ZERO 
  | 14 -> TOKEN_DEFINE 
  | 15 -> TOKEN_NAT 
  | 16 -> TOKEN_ATOM 
  | 17 -> TOKEN_NAME 
  | 20 -> TOKEN_end_of_input
  | 18 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_typ 
    | 3 -> NONTERM_typ 
    | 4 -> NONTERM_typ 
    | 5 -> NONTERM_value 
    | 6 -> NONTERM_value 
    | 7 -> NONTERM_value 
    | 8 -> NONTERM_both 
    | 9 -> NONTERM_both 
    | 10 -> NONTERM_name_fields 
    | 11 -> NONTERM_name_fields 
    | 12 -> NONTERM_name_fields 
    | 13 -> NONTERM_statement_list 
    | 14 -> NONTERM_statement_list 
    | 15 -> NONTERM_stmntbody 
    | 16 -> NONTERM_stmntbody 
    | 17 -> NONTERM_stmntbody 
    | 18 -> NONTERM_stmntbody 
    | 19 -> NONTERM_stmntbody 
    | 20 -> NONTERM_stmntbody 
    | 21 -> NONTERM_stmntbody 
    | 22 -> NONTERM_stmntbody 
    | 23 -> NONTERM_stmntbody 
    | 24 -> NONTERM_stmnt 
    | 25 -> NONTERM_prog 
    | 26 -> NONTERM_prog 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 20 
let _fsyacc_tagOfErrorTerminal = 18

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | T_NAT  -> "T_NAT" 
  | T_ATOM  -> "T_ATOM" 
  | T_PAIR  -> "T_PAIR" 
  | LAMBDA  -> "LAMBDA" 
  | EOF  -> "EOF" 
  | L_PAREN  -> "L_PAREN" 
  | R_PAREN  -> "R_PAREN" 
  | CONS  -> "CONS" 
  | CAR  -> "CAR" 
  | CDR  -> "CDR" 
  | PLUS  -> "PLUS" 
  | ADD1  -> "ADD1" 
  | CLAIM  -> "CLAIM" 
  | ZERO  -> "ZERO" 
  | DEFINE  -> "DEFINE" 
  | NAT _ -> "NAT" 
  | ATOM _ -> "ATOM" 
  | NAME _ -> "NAME" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | T_NAT  -> (null : System.Object) 
  | T_ATOM  -> (null : System.Object) 
  | T_PAIR  -> (null : System.Object) 
  | LAMBDA  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | L_PAREN  -> (null : System.Object) 
  | R_PAREN  -> (null : System.Object) 
  | CONS  -> (null : System.Object) 
  | CAR  -> (null : System.Object) 
  | CDR  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | ADD1  -> (null : System.Object) 
  | CLAIM  -> (null : System.Object) 
  | ZERO  -> (null : System.Object) 
  | DEFINE  -> (null : System.Object) 
  | NAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ATOM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 5us; 6us; 6us; 7us; 36us; 37us; 11us; 65535us; 17us; 12us; 22us; 12us; 23us; 12us; 24us; 12us; 26us; 12us; 28us; 12us; 30us; 12us; 31us; 12us; 33us; 12us; 39us; 12us; 41us; 19us; 10us; 65535us; 17us; 18us; 22us; 16us; 23us; 24us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 31us; 32us; 33us; 34us; 39us; 40us; 1us; 65535us; 21us; 14us; 1us; 65535us; 22us; 17us; 1us; 65535us; 41us; 42us; 12us; 65535us; 0us; 44us; 17us; 11us; 22us; 11us; 23us; 11us; 24us; 11us; 26us; 11us; 28us; 11us; 30us; 11us; 31us; 11us; 33us; 11us; 39us; 11us; 44us; 44us; 2us; 65535us; 0us; 2us; 44us; 45us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 19us; 30us; 32us; 34us; 36us; 49us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 11us; 2us; 12us; 16us; 1us; 12us; 1us; 13us; 2us; 14us; 16us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 26us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 31us; 33us; 35us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 76us; 78us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; |]
let _fsyacc_action_rows = 47
let _fsyacc_actionTableElements = [|2us; 32768us; 4us; 46us; 5us; 41us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 3us; 32768us; 0us; 3us; 1us; 4us; 2us; 5us; 3us; 32768us; 0us; 3us; 1us; 4us; 2us; 5us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16395us; 2us; 32768us; 6us; 22us; 17us; 15us; 0us; 16396us; 0us; 16397us; 4us; 16400us; 5us; 41us; 13us; 9us; 15us; 10us; 16us; 8us; 0us; 16398us; 0us; 16399us; 1us; 32768us; 5us; 21us; 1us; 16394us; 17us; 13us; 4us; 32768us; 5us; 41us; 13us; 9us; 15us; 10us; 16us; 8us; 4us; 32768us; 5us; 41us; 13us; 9us; 15us; 10us; 16us; 8us; 4us; 32768us; 5us; 41us; 13us; 9us; 15us; 10us; 16us; 8us; 0us; 16401us; 4us; 32768us; 5us; 41us; 13us; 9us; 15us; 10us; 16us; 8us; 0us; 16402us; 4us; 32768us; 5us; 41us; 13us; 9us; 15us; 10us; 16us; 8us; 0us; 16403us; 4us; 32768us; 5us; 41us; 13us; 9us; 15us; 10us; 16us; 8us; 4us; 32768us; 5us; 41us; 13us; 9us; 15us; 10us; 16us; 8us; 0us; 16404us; 4us; 32768us; 5us; 41us; 13us; 9us; 15us; 10us; 16us; 8us; 0us; 16405us; 1us; 32768us; 17us; 36us; 3us; 32768us; 0us; 3us; 1us; 4us; 2us; 5us; 0us; 16406us; 1us; 32768us; 17us; 39us; 4us; 32768us; 5us; 41us; 13us; 9us; 15us; 10us; 16us; 8us; 0us; 16407us; 11us; 32768us; 3us; 20us; 7us; 23us; 8us; 26us; 9us; 28us; 10us; 30us; 11us; 33us; 12us; 35us; 13us; 9us; 14us; 38us; 15us; 10us; 16us; 8us; 1us; 32768us; 6us; 43us; 0us; 16408us; 2us; 32768us; 4us; 46us; 5us; 41us; 0us; 16409us; 0us; 16410us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 5us; 6us; 7us; 11us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 25us; 26us; 27us; 32us; 33us; 34us; 36us; 38us; 43us; 48us; 53us; 54us; 59us; 60us; 65us; 66us; 71us; 76us; 77us; 82us; 83us; 85us; 89us; 90us; 92us; 97us; 98us; 110us; 112us; 113us; 116us; 117us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 0us; 1us; 2us; 1us; 2us; 1us; 5us; 3us; 2us; 2us; 3us; 2us; 3us; 3us; 3us; 2us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 8us; 9us; 9us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 16387us; 65535us; 65535us; 16388us; 16389us; 16390us; 16391us; 16392us; 16393us; 16395us; 65535us; 16396us; 16397us; 65535us; 16398us; 16399us; 65535us; 65535us; 65535us; 65535us; 65535us; 16401us; 65535us; 16402us; 65535us; 16403us; 65535us; 65535us; 16404us; 65535us; 16405us; 65535us; 65535us; 16406us; 65535us; 65535us; 16407us; 65535us; 65535us; 16408us; 65535us; 16409us; 16410us; |]
let _fsyacc_reductions ()  =    [| 
# 202 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AST.Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 211 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 14 "Parser.fsy"
                                   _1 
                   )
# 14 "Parser.fsy"
                 : AST.Prog));
# 222 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 19 "Parser.fsy"
                                Type.Nat 
                   )
# 19 "Parser.fsy"
                 : 'typ));
# 232 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "Parser.fsy"
                                 Type.Atom 
                   )
# 20 "Parser.fsy"
                 : 'typ));
# 242 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "Parser.fsy"
                                         Type.Pair(_2,_3) 
                   )
# 21 "Parser.fsy"
                 : 'typ));
# 254 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "Parser.fsy"
                                Atom(_1) 
                   )
# 25 "Parser.fsy"
                 : 'value));
# 265 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "Parser.fsy"
                                Nat(0u) 
                   )
# 26 "Parser.fsy"
                 : 'value));
# 275 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : uint32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "Parser.fsy"
                               Nat(_1) 
                   )
# 27 "Parser.fsy"
                 : 'value));
# 286 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmnt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                 _1 
                   )
# 31 "Parser.fsy"
                 : 'both));
# 297 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                 _1 
                   )
# 32 "Parser.fsy"
                 : 'both));
# 308 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                           [] 
                   )
# 35 "Parser.fsy"
                 : 'name_fields));
# 318 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                [_1] 
                   )
# 36 "Parser.fsy"
                 : 'name_fields));
# 329 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'name_fields)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                            _2 :: _1 
                   )
# 37 "Parser.fsy"
                 : 'name_fields));
# 341 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'both)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                [_1] 
                   )
# 41 "Parser.fsy"
                 : 'statement_list));
# 352 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'both)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                               _2 :: _1 
                   )
# 42 "Parser.fsy"
                 : 'statement_list));
# 364 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                _1
                   )
# 46 "Parser.fsy"
                 : 'stmntbody));
# 375 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'name_fields)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                                             Lambda(List.rev _3, List.rev _5) 
                   )
# 47 "Parser.fsy"
                 : 'stmntbody));
# 387 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'both)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'both)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                          Cons(_2, _3) 
                   )
# 48 "Parser.fsy"
                 : 'stmntbody));
# 399 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'both)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                     Car(_2) 
                   )
# 49 "Parser.fsy"
                 : 'stmntbody));
# 410 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'both)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                     Cdr(_2) 
                   )
# 50 "Parser.fsy"
                 : 'stmntbody));
# 421 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'both)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'both)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                           Plus( _2, _3) 
                   )
# 51 "Parser.fsy"
                 : 'stmntbody));
# 433 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'both)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                      Add1(_2) 
                   )
# 52 "Parser.fsy"
                 : 'stmntbody));
# 444 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                          Claim (_2,_3) 
                   )
# 53 "Parser.fsy"
                 : 'stmntbody));
# 456 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'both)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                            Define ( _2, _3) 
                   )
# 54 "Parser.fsy"
                 : 'stmntbody));
# 468 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmntbody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                     _2 
                   )
# 58 "Parser.fsy"
                 : 'stmnt));
# 479 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmnt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                      List.rev (_1::_2) 
                   )
# 63 "Parser.fsy"
                 : 'prog));
# 491 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                               [] 
                   )
# 64 "Parser.fsy"
                 : 'prog));
|]
# 502 "Parser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 21;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : AST.Prog =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
